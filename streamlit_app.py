import subprocess, sys, importlib, os, tempfile, numpy as np, tensorflow as tf
import streamlit as st

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç OpenCV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def safe_import_cv2():
    try:
        return importlib.import_module("cv2")
    except ImportError:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install",
            "--quiet", "opencv-python-headless==4.7.0.72"
        ])
        return importlib.import_module("cv2")
cv2 = safe_import_cv2()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
IMG_SIZE, STEP = 150, 10
COLLAPSE_CLASSES = ["No_Landslide", "Rockfall", "Earth_Flow"]
DANGER_CLASSES   = ["Safe", "Roads_Damaged", "Houses_Damaged"]
HUMAN_READABLE = {
    "No_Landslide": "–ù–µ—Ç –æ–±–≤–∞–ª–∞",
    "Rockfall":     "–ö–∞–º–Ω–µ–ø–∞–¥",
    "Earth_Flow":   "–ó–µ–º–Ω–æ–π –ø–æ—Ç–æ–∫",
    "Safe":         "–ù–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "Roads_Damaged":"–†–∞–∑—Ä—É—à–µ–Ω—ã –¥–æ—Ä–æ–≥–∏",
    "Houses_Damaged":"–†–∞–∑—Ä—É—à–µ–Ω—ã –¥–æ–º–∞",
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π (–∫—ç—à) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@st.cache_resource(show_spinner=False)
def load_models():
    coll = tf.keras.models.load_model("collapse_model.h5", compile=False) \
           if os.path.exists("collapse_model.h5") else None
    if not os.path.exists("danger_model.h5"):
        st.error("–§–∞–π–ª **danger_model.h5** –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                 "–ü–æ–ª–æ–∂–∏—Ç–µ –º–æ–¥–µ–ª—å –≤ –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.")
        st.stop()
    dang = tf.keras.models.load_model("danger_model.h5", compile=False)
    return coll, dang
collapse_model, danger_model = load_models()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def classify_video(model, classes, path):
    cap = cv2.VideoCapture(path)
    if not cap.isOpened():
        return None, 0.0
    votes, fid = np.zeros(len(classes), int), 0
    total = int(cap.get(cv2.CAP_PROP_FRAME_COUNT) or 0)
    step_prog = max(total // 100, 1)
    prog = st.progress(0)
    while True:
        ok, frame = cap.read()
        if not ok:
            break
        if fid % STEP == 0:
            fr = cv2.resize(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB),
                            (IMG_SIZE, IMG_SIZE))
            p = model.predict(np.expand_dims(fr, 0) / 255., verbose=0)[0]
            votes[np.argmax(p)] += 1
        if fid % step_prog == 0:
            prog.progress(min(fid / max(total, 1), 1.0))
        fid += 1
    cap.release(); prog.empty()
    if votes.sum() == 0:
        return None, 0.0
    idx = votes.argmax()
    return classes[idx], votes[idx] / votes.sum()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Streamlit utils ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def do_rerun():
    if hasattr(st, "rerun"):
        st.rerun()
    elif hasattr(st, "experimental_rerun"):
        st.experimental_rerun()
    else:
        st.warning("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ä—É—á–Ω—É—é.")

def reset_app():
    vid = st.session_state.get("video_path")
    if vid:
        try: os.unlink(vid)
        except FileNotFoundError: pass
    st.session_state.clear()
    do_rerun()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.set_page_config("Landslide Detection", "üåã")
st.title("üåã Landslide Detection")

st.write(
    "1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ (.mp4 / .avi / .mov)\n"
    "2. –ù–∞–∂–º–∏—Ç–µ **–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ–±–≤–∞–ª**\n"
    "3. –ï—Å–ª–∏ –æ–±–≤–∞–ª –Ω–∞–π–¥–µ–Ω ‚Äî –Ω–∞–∂–º–∏—Ç–µ **–û—Ü–µ–Ω–∏—Ç—å –æ–ø–∞—Å–Ω–æ—Å—Ç—å**"
)

# ---------- session init ----------
if "video_path" not in st.session_state:
    st.session_state.update(
        video_path=None, collapse_class=None, collapse_conf=None,
        danger_done=False
    )

# ---------- upload ----------
file = st.file_uploader("–í–∏–¥–µ–æ-—Ñ–∞–π–ª", type=["mp4","avi","mov","mkv"])
if file:
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
    tmp.write(file.read()); tmp.close()
    st.session_state.video_path = tmp.name
    st.session_state.collapse_class = None
    st.session_state.danger_done = False
    st.video(tmp.name)

# ---------- –∫–Ω–æ–ø–∫–∞ 1 ----------
if st.session_state.video_path and not st.session_state.collapse_class:
    if st.button("üîç –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ–±–≤–∞–ª"):
        if collapse_model is None:
            st.warning("collapse_model.h5 –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø –æ–±–≤–∞–ª–∞.")
            st.session_state.collapse_class = "No_Landslide"
            st.session_state.collapse_conf = 0
        else:
            cls, conf = classify_video(
                collapse_model, COLLAPSE_CLASSES, st.session_state.video_path)
            if cls is None:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–∏–¥–µ–æ."); reset_app()
            st.session_state.collapse_class = cls
            st.session_state.collapse_conf = conf

# ---------- –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±–≤–∞–ª–∞ ----------
if st.session_state.collapse_class:
    hr = HUMAN_READABLE[st.session_state.collapse_class]
    st.info(f"**–¢–∏–ø –æ–±–≤–∞–ª–∞:** {hr}  ({st.session_state.collapse_conf*100:.1f} %)")

# ---------- –∫–Ω–æ–ø–∫–∞ 2 ----------
need_danger = (
    st.session_state.collapse_class and
    st.session_state.collapse_class != "No_Landslide" and
    not st.session_state.danger_done
)
if need_danger:
    if st.button("‚ö†Ô∏è –û—Ü–µ–Ω–∏—Ç—å –æ–ø–∞—Å–Ω–æ—Å—Ç—å"):
        d_cls, d_conf = classify_video(
            danger_model, DANGER_CLASSES, st.session_state.video_path)
        if d_cls is None:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–∏–¥–µ–æ."); reset_app()
        st.session_state.danger_done = True
        hr = HUMAN_READABLE[d_cls]
        st.success(f"**–û–ø–∞—Å–Ω–æ—Å—Ç—å:** {hr}  ({d_conf*100:.1f} %)")

# ---------- –µ—Å–ª–∏ –æ–±–≤–∞–ª–∞ –Ω–µ—Ç ----------
if st.session_state.collapse_class == "No_Landslide":
    st.success("–û–±–≤–∞–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ‚Äî –æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è.")

# ---------- reset ----------
if st.session_state.video_path:
    st.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ", on_click=reset_app)
