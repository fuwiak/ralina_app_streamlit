# streamlit_app.py  ‚Äî  –≤–µ—Ä—Å–∏—è –±–µ–∑ libGL
# -----------------------------------------------------------------------------
# –ï—Å–ª–∏ opencv-python –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ libGL.so, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏–º
# opencv-python-headless –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.

import subprocess, sys, importlib, os, tempfile, numpy as np, tensorflow as tf
import streamlit as st

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç OpenCV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def safe_import_cv2():
    try:
        return importlib.import_module("cv2")
    except ImportError:
        subprocess.check_call([sys.executable, "-m", "pip", "install",
                               "--quiet", "opencv-python-headless>=4.8.1.78"])
        return importlib.import_module("cv2")

cv2 = safe_import_cv2()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
IMG_SIZE, STEP = 150, 10
COLLAPSE_CLASSES = ["No_Landslide", "Rockfall", "Earth_Flow"]
DANGER_CLASSES   = ["Safe", "Roads_Damaged", "Houses_Damaged"]

@st.cache_resource(show_spinner=False)
def load_models():
    coll, dang = None, None
    if os.path.exists("collapse_model.h5"):
        coll = tf.keras.models.load_model("collapse_model.h5", compile=False)
    if not os.path.exists("danger_model.h5"):
        st.error("–§–∞–π–ª **danger_model.h5** –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                 "–ü–æ–ª–æ–∂–∏—Ç–µ –º–æ–¥–µ–ª—å –≤ –ø–∞–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.")
        st.stop()
    dang = tf.keras.models.load_model("danger_model.h5", compile=False)
    return coll, dang

collapse_model, danger_model = load_models()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def classify_video(model, classes, path):
    cap = cv2.VideoCapture(path)
    if not cap.isOpened():
        return None, 0.0

    votes, fid = np.zeros(len(classes), int), 0
    total = int(cap.get(cv2.CAP_PROP_FRAME_COUNT) or 0)
    step_prog = max(total // 100, 1)
    prog = st.progress(0)

    while True:
        ok, frame = cap.read()
        if not ok:
            break
        if fid % STEP == 0:
            fr = cv2.resize(
                cv2.cvtColor(frame, cv2.COLOR_BGR2RGB),
                (IMG_SIZE, IMG_SIZE)            # ‚Üê –∫–æ—Ä—Ç–µ–∂, –∞ –Ω–µ —á–∏—Å–ª–æ!
            )
            pred = model.predict(np.expand_dims(fr, 0) / 255., verbose=0)[0]
            votes[np.argmax(pred)] += 1
        if fid % step_prog == 0:
            prog.progress(min(fid / max(total, 1), 1.0))
        fid += 1

    cap.release()
    prog.empty()
    if votes.sum() == 0:
        return None, 0.0
    idx = votes.argmax()
    return classes[idx], votes[idx] / votes.sum()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Streamlit UI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.set_page_config("Landslide Detection", "üåã")
st.title("üåã Landslide Detection")

st.write(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ (.mp4 / .avi / .mov). "
    "–ï—Å–ª–∏ —Ä—è–¥–æ–º –Ω–µ—Ç `collapse_model.h5`, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫—É –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ "
    "(Safe / Roads_Damaged / Houses_Damaged)."
)

video_file = st.file_uploader("–í–∏–¥–µ–æ-—Ñ–∞–π–ª", type=["mp4","avi","mov","mkv"])

if video_file:
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
    tmp.write(video_file.read()); tmp.close()
    st.success(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {video_file.name}")

    if st.button("üîç –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å"):
        with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º‚Ä¶"):
            # 1) —Ç–∏–ø –æ–±–≤–∞–ª–∞
            collapse_cls, collapse_conf = None, None
            if collapse_model:
                collapse_cls, collapse_conf = classify_video(
                    collapse_model, COLLAPSE_CLASSES, tmp.name)
                if collapse_cls is None:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–∏–¥–µ–æ."); os.unlink(tmp.name); st.stop()
                st.info(f"**–¢–∏–ø –æ–±–≤–∞–ª–∞:** {collapse_cls}  ({collapse_conf*100:.1f} %)")

            # 2) –æ–ø–∞—Å–Ω–æ—Å—Ç—å
            if (collapse_model is None) or (collapse_cls != "No_Landslide"):
                danger_cls, danger_conf = classify_video(
                    danger_model, DANGER_CLASSES, tmp.name)
                if danger_cls is None:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–∏–¥–µ–æ."); os.unlink(tmp.name); st.stop()
                st.success(f"**–û–ø–∞—Å–Ω–æ—Å—Ç—å:** {danger_cls}  ({danger_conf*100:.1f} %)")
            else:
                st.success("–û–±–≤–∞–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ‚Äî –æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è.")

        os.unlink(tmp.name)
        st.button("üîÑ –ù–æ–≤—ã–π —Ñ–∞–π–ª", on_click=lambda: st.experimental_rerun())
else:
    st.caption("‚¨ÜÔ∏è  –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –Ω–∞—á–∞–ª–∞.")
