
import streamlit as st
import tensorflow as tf
import numpy as np
import cv2, tempfile, os

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
IMG_SIZE, STEP = 150, 10         # —Ä–µ—Å–∞–π–∑ –∫–∞–¥—Ä–∞ –∏ ¬´–∫–∞–∂–¥—ã–π N-–π –∫–∞–¥—Ä¬ª
COLLAPSE_CLASSES = ["No_Landslide", "Rockfall", "Earth_Flow"]
DANGER_CLASSES   = ["Safe", "Roads_Damaged", "Houses_Damaged"]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫—ç—à-–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@st.cache_resource(show_spinner=False)
def load_models():
    collapse, danger = None, None
    if os.path.exists("collapse_model.h5"):
        collapse = tf.keras.models.load_model("collapse_model.h5")
    if not os.path.exists("danger_model.h5"):
        st.error("‚ö†Ô∏è  –§–∞–π–ª danger_model.h5 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        st.stop()
    danger = tf.keras.models.load_model("danger_model.h5")
    return collapse, danger
collapse_model, danger_model = load_models()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def classify_video(model, classes, path):
    cap = cv2.VideoCapture(path)
    if not cap.isOpened(): return None, 0.0
    votes, frame_id = np.zeros(len(classes), int), 0
    total = int(cap.get(cv2.CAP_PROP_FRAME_COUNT) or 0)
    every = max(total // 100, 1)               # progress –≤ 100 —à–∞–≥–æ–≤
    prog = st.progress(0)
    while True:
        ok, frame = cap.read()
        if not ok: break
        if frame_id % STEP == 0:
            fr = cv2.resize(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB), (IMG_SIZE, IMG_SIZE))
            p = model.predict(np.expand_dims(fr, 0)/255., verbose=0)[0]
            votes[np.argmax(p)] += 1
        if frame_id % every == 0:
            prog.progress(min(frame_id / max(total,1), 1.0))
        frame_id += 1
    cap.release(); prog.empty()
    if votes.sum()==0: return None, 0.0
    idx = votes.argmax()
    return classes[idx], votes[idx]/votes.sum()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.set_page_config(page_title="Landslide Detection", page_icon="üåã", layout="centered")
st.title("üåã Landslide Detection")

st.markdown("""
–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ *.mp4 / *.avi* –∏ –Ω–∞–∂–º–∏—Ç–µ **–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å**.  
*–ï—Å–ª–∏ —Ä—è–¥–æ–º –Ω–µ—Ç `collapse_model.h5`, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫—É –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
(`Safe / Roads_Damaged / Houses_Damaged`).*
""")

video_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª", type=["mp4", "avi", "mov", "mkv"])

if video_file:
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
    tmp.write(video_file.read()); tmp.close()
    st.success(f"‚úî –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {video_file.name}")

    if st.button("–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å"):
        with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ‚Ä¶"):
            # —à–∞–≥ 1: —Ç–∏–ø –æ–±–≤–∞–ª–∞ (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –µ—Å—Ç—å)
            collapse_cls, collapse_conf = None, None
            if collapse_model is not None:
                collapse_cls, collapse_conf = classify_video(
                    collapse_model, COLLAPSE_CLASSES, tmp.name)
                if collapse_cls is None:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–∏–¥–µ–æ."); os.unlink(tmp.name); st.stop()
                st.info(f"**–¢–∏–ø –æ–±–≤–∞–ª–∞:** {collapse_cls}  ({collapse_conf*100:.1f} %)")

            # —Ä–µ—à–µ–Ω–∏–µ: –Ω—É–∂–Ω–æ –ª–∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –æ–ø–∞—Å–Ω–æ—Å—Ç—å?
            if (collapse_model is None) or (collapse_cls != "No_Landslide"):
                danger_cls, danger_conf = classify_video(
                    danger_model, DANGER_CLASSES, tmp.name)
                if danger_cls is None:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–∏–¥–µ–æ."); os.unlink(tmp.name); st.stop()
                st.success(f"**–û–ø–∞—Å–Ω–æ—Å—Ç—å:** {danger_cls}  ({danger_conf*100:.1f} %)")
            else:
                st.success("–û–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è, —Ç.–∫. –æ–±–≤–∞–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")

        os.unlink(tmp.name)        # —á–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        st.button("üîÑ –°–±—Ä–æ—Å", on_click=lambda: st.experimental_rerun())
else:
    st.caption("‚¨ÜÔ∏è  –í–∏–¥–µ–æ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
